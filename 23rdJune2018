pragma solidity ^0.4.16;

contract EllipticCurve{
    /// Proof of Work, shor's algorithm + discrete logarithm problem + random hash
    bytes32 public currentChallenge;                         // The coin starts with a challenge
    uint public timeOfLastProof;                             // Variable to keep track of when rewards were given
    uint public difficulty = 10**32;                         // Difficulty starts reasonably low
    uint256 constant order = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;
    uint256 constant gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;
    uint256 constant gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;
    uint256 constant n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;
    uint256 constant a = 0;
    uint256 constant b = 7;
    uint256 constant scalarField = 5;

    function EllipticCurve()
    {
    }

    function _jAdd( uint256 x1,uint256 z1,
                    uint256 x2,uint256 z2) constant
        returns(uint256 x3,uint256 z3)
    {
        (x3, z3) = (  addmod( mulmod(z2, x1 , n) ,
                              mulmod(x2, z1 , n),
                              n),
                      mulmod(z1, z2 , n)
                    );
    }

    function _jSub( uint256 x1,uint256 z1,
                    uint256 x2,uint256 z2) constant
        returns(uint256 x3,uint256 z3)
    {
        (x3, z3) = (  addmod( mulmod(z2, x1, n),
                              mulmod(n - x2, z1, n),
                              n),
                      mulmod(z1, z2 , n)
                    );
    }

    function _jMul( uint256 x1,uint256 z1,
                    uint256 x2,uint256 z2) constant
        returns(uint256 x3,uint256 z3)
    {
        (x3, z3) = (  mulmod(x1, x2 , n), mulmod(z1, z2 , n));
    }

    function _jDiv( uint256 x1,uint256 z1,
                    uint256 x2,uint256 z2) constant
        returns(uint256 x3,uint256 z3)
    {
        (x3, z3) = (  mulmod(x1, z2 , n), mulmod(z1 , x2 , n));
    }

    function _inverse( uint256 x) constant
        returns(uint256 invA)
    {
        uint256 t=0;
        uint256 newT=1;
        uint256 r=n;
        uint256 newR=x;
        uint256 q;
        while (newR != 0) {
            q = r / newR;

            (t, newT) = (newT, addmod(t , (n - mulmod(q, newT,n)) , n));
            (r, newR) = (newR, r - q * newR );
        }

        return t;
    }

    function _ecAdd( uint256 x1,uint256 y1,uint256 z1,
                    uint256 x2,uint256 y2,uint256 z2) constant
        returns(uint256 x3,uint256 y3,uint256 z3)
    {
        uint256 l;
        uint256 lz;
        uint256 da;
        uint256 db;

        if ((x1==0)&&(y1==0)) {
            return (x2,y2,z2);
        }

        if ((x2==0)&&(y2==0)) {
            return (x1,y1,z1);
        }

        if ((x1==x2)&&(y1==y2)) {
            (l,lz) = _jMul(x1, z1, x1, z1);
            (l,lz) = _jMul(l, lz, 3, 1);
            (l,lz) = _jAdd(l, lz, a, 1);

            (da,db) = _jMul(y1, z1, 2, 1);
        } else {
            (l,lz) = _jSub(y2, z2, y1, z1);
            (da,db)  = _jSub(x2, z2, x1, z1);
        }

        (l, lz) = _jDiv(l, lz, da, db);


        (x3, da) = _jMul(l, lz, l, lz);
        (x3, da) = _jSub(x3, da, x1, z1);
        (x3, da) = _jSub(x3, da, x2, z2);

        (y3, db) = _jSub(x1, z1, x3, da);
        (y3, db) = _jMul(y3, db, l, lz );
        (y3, db) = _jSub(y3, db, y1, z1 );


        if (da != db) {
            x3 = mulmod(x3, db, n);
            y3 = mulmod(y3, da, n);
            z3 = mulmod(da, db, n);
        } else {
            z3 = da;
        }

    }

    function _ecDouble(uint256 x1,uint256 y1,uint256 z1) constant
        returns(uint256 x3,uint256 y3,uint256 z3)
    {
        (x3,y3,z3) = _ecAdd(x1,y1,z1,x1,y1,z1);
    }

    function _ecMul(uint256 d, uint256 x1,uint256 y1,uint256 z1) constant
        returns(uint256 x3,uint256 y3,uint256 z3)
    {
        uint256 remaining = d;
        uint256 px = x1;
        uint256 py = y1;
        uint256 pz = z1;
        uint256 acx = 0;
        uint256 acy = 0;
        uint256 acz = 1;

        if (d==0) {
            return (0,0,1);
        }

        while (remaining != 0) {
            if ((remaining & 1) != 0) {
                (acx,acy,acz) = _ecAdd(acx,acy,acz, px,py,pz);
            }
            remaining = remaining / 2;
            (px,py,pz) = _ecDouble(px,py,pz);
        }

        (x3,y3,z3) = (acx,acy,acz);
    }

    function publicKey(uint256 privKey) constant
        returns(uint256 qx, uint256 qy)
    {
        uint256 x;
        uint256 y;
        uint256 z;
        (x,y,z) = _ecMul(privKey, gx, gy, 1);
        z = _inverse(z);
        qx = mulmod(x , z ,n);
        qy = mulmod(y , z ,n);
    }

    function deriveKey(uint256 privKey, uint256 pubX, uint256 pubY) constant
        returns(uint256 qx, uint256 qy)
    {
        uint256 x;
        uint256 y;
        uint256 z;
        (x,y,z) = _ecMul(privKey, pubX, pubY, 1);
        z = _inverse(z);
        qx = mulmod(x , z ,n);
        qy = mulmod(y , z ,n);
    }
    
    //--------------------------------------
    
    /// Multiplies P in affine coordinates by scalar k
    /// Works perfectly
	function ellipticCurveMultiplicationAffine(uint256 k, uint256 x1, uint256 y1) constant returns(uint256 x3,uint256 y3){
    	uint256 remaining = k;
    	uint256 px = x1;
    	uint256 py = y1;
    	uint256 acx = 0;
    	uint256 acy = 0;

    	if (k == 0){
        	return (0, 0);
    	}
    	while (remaining != 0){
        	if ((remaining & 1) != 0){
            	(acx, acy) = ellipticCurveAdditionAffine(acx, acy, px, py);
        	}
        	remaining = remaining / 2;
        	(px, py) = ellipticCurveDoublingAffine(px, py);
    	}
        (x3, y3) = (acx, acy);
	}
	
	/// Adds P and Q in affine coordinates
	/// Works perfectly
	function ellipticCurveAdditionAffine(uint256 x1, uint256 y1, uint256 x2, uint256 y2) constant returns (uint256 x3, uint256 y3){
        if((x1 == 0) && (y1 == 0)){
        	return (x2, y2);
    	}
    	if((x2 == 0) && (y2 == 0)){
        	return (x1, y1);
    	}
    	if(x1 == x2){
    	   // if((y1 + y2) % n == 0){
    	   //     return (0, 1);
    	   // }
    	    if (y1 == y2){
    	    uint256 numerator = addmod(mulmod(3, mulmod(x1, x1, n), n), a, n);
    	    uint256 denominator = mulmod(2, y1, n);
    	    }
    	}
    	else{
    	    numerator = addmod(y2, n - y1, n);
    	    denominator = addmod(x2, n - x1, n);
    	}
    	x3 = addmod(addmod(mulmod(numerator * _inverse(denominator), numerator * _inverse(denominator), n), n - x1, n), n - x2, n);
    	y3 = addmod(addmod(mulmod(numerator * _inverse(denominator), x1, n), mulmod(numerator * _inverse(denominator), n - x3, n), n), n - y1, n);
    	
    	(x3, y3);
    }
	
	/// Doubles (Px, Py) in affine coordinates
    /// Works perfectly
	function ellipticCurveDoublingAffine(uint256 x1, uint256 y1) constant returns(uint256 x3, uint256 y3){
    	(x3, y3) = ellipticCurveAdditionAffine(x1, y1, x1, y1);
	}
	
	/// Checks if a point modulo n lies on the curve
    /// No need for z1, only checks affine coordinates
    /// Works perfectly
    function onCurveChecker(uint256 x1, uint256 y1) constant returns (bool){
        if (0 == x1 || x1 == n || 0 == y1 || y1 == n){ // Point at infinity
            return false;
        }
        uint256 LHS = mulmod(y1, y1, n);
        uint256 RHS = addmod(addmod(mulmod(mulmod(x1, x1, n), x1, n), x1 * a, n), b, n);
        return LHS == RHS;
    }
    
    function findAddress(bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) returns (address) {
        return ecrecover(msgHash, v, r, s);
    }
    
    function isSigned(address _addr, bytes32 msgHash, uint8 v, bytes32 r, bytes32 s) returns (bool) {
        return ecrecover(msgHash, v, r, s) == _addr;
    }
    
    /// Find the discrete logarithm over F23 under addition
    /// Works perfectly
	function ellipticCurveDiscreteLogarithmAffine(uint256 privKey) constant returns (uint256 qx, uint256 qy, uint256 Qx, uint256 Qy, uint256 x3,uint256 y3, uint256 k, uint256 discreteLogarithm){
   	    k = uint256(keccak256(block.timestamp)) % scalarField + 1;
   	    (qx, qy) = publicKey(privKey);
   	    
   	    (Qx, Qy) = ellipticCurveMultiplicationAffine(k, qx, qy);
   	    
   	    for (uint256 i = 1; i <= scalarField + 1; i++){
        	(x3, y3) = ellipticCurveMultiplicationAffine(i, qx, qy);
        	if (x3 == Qx && y3 == Qy){
            	discreteLogarithm = i;
            	break;
        	}
    	}
    	
    	(x3,y3);
   }
   
}
